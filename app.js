// eslint-error-on-next-line quotes
const express = require("express");
// eslint-error-on-next-line import/no-extraneous-dependencies, quotes
const bodyParser = require("body-parser"); // необходимо добавить пакет в package.json
const router = require('./src/router.js');

const app = express();
const HTTP_PORT = 3000;

app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

app.use('/', router);

// Start server
app.listen(HTTP_PORT, () => {
  // eslint-error-on-next-line no-console
    console.log(`Server running on port ${HTTP_PORT}`);
});
// eslint-error-on-next-line no-multiple-empty-lines

/**
 * Общие замечания по проекту:
 *
 * Стилистика кода:
 * 1. Я бы посоветовал отделять пустой строкой блоки (до и после) if, case и другие.
 *    Ставить пустую строку перед вызовом оператора return.
 * 2. Множественные стилистические ошибки (помечены как `eslint-error-on-next-line`),
 *    которые возникли из-за отсутствия линтера. На примере конфигурации eslint от команды
 *    airbnb можно выделить перечень основных ошибок:
 *    * quotes - использование знака " вместо ' для литералов строк;
 *    * no-console - использование console в коде. console, как и debugger,
 *      является инструментом отладки и не должен попадать в репозиторий;
 *    * no-multiple-empty-lines - в конце файла стоят 2 или более пустых строк вместо 1;
 *    * comma-spacing - нет пробела перед знаком ',';
 *    * no-shadow - сокрытие - использование имени для переменной имени,
 *      которое уже существует в родительском скоупе;
 *    * semi - пропущен знак ';';
 *    * keyword-spacing - нет пробела перед ключевым словом (например, `else`);
 *    * no-unused-vars - есть переменные, которые не были использованы;
 *    * object-curly-spacing - нет пробела после знака '{' (или  до знака '}') в литерале объекта;
 *    * quote-props - свойства объекта записаны в ковычках;
 *    * comma-dangle - пропущена запятая в перечислении объектов;
 *    * space-before-blocks - нет пробела перед блоком { };
 *    * space-infix-ops - нет пробела перед бинарными операторами (например, =).
 * 3. Отсутствуют комментарии к коду и аннотации функций. Необходимо добавить описание в формате JSDOC.
 * 4. Использовать современный синтаксис ES6.
 * Архитектурные решения:
 * 5. Константные значения `HTTP_PORT`, `DBSOURCE` нужно вынести в файл настройки или
 *    в переменные окружения. Самым лучшим решением, на мой взгляд, является создание
 *    файла `config.js`, где определяется переменная окружения, либо ставится значение по-умолчанию.
 *    Так же стоит обратить внимание на этот пакет - https://www.npmjs.com/package/dotenv.
 * 6. Модуль `Database` можно было заменить библиотекой `knexjs` (https://knexjs.org/),
 *    которая существенно упрощает взаимодействие с СУБД. Было бы достаточно создать подключение
 *    и пробрасывать его в модули, как аргумент.
 * 7. Вынести все SQL-запросы, в отдельный файл и обернуть в функции - это самый простой вариант.
 *    Другой вариант - переписать запросы на `knexjs`.
 * 8. Так как библиотека `sqlite3` использует в себе `EventEmitter`, можно было бы переписать взаимодействие
 *    с библотекой с использованием `Streams API` или `Promises`, что позволило бы держать контекст внутри цепочки
 *    вызовов.
 * 9. Чтобы снизить связанность модулей, я бы посоветовал реализовать модуль-обертку над
 *    методами библиотеки. Это позволит заменить СУБД "малой кровью", переписав 1 модуль вместо проекта.
 * 10. Вместо `console` рекомендую использовать логгер, например: https://github.com/winstonjs/winston.
 * 11. Хорошей практикой считается подход, когда сообщения в логе имеют маркировку(tag)
 *     функционального модуля. Например: "[router] [recieve] <income_params>"
 * 12. Нобходимы unit тесты.
 *
 * Разработка:
 * 13. В файл `.gitignore` необходимо добавить комментарии, чтобы позднее было удобно читать данный файл.
 * 14. Чтобы ускорить разработку и улучшить качество кода, необходимо добавить линтер.
 * 15. Чтобы ускорить разработку и не перезапускать проект после каждого изменения, стоит обратить внимание
 *     на пакет `nodemon` (https://github.com/remy/nodemon). Данный пакет, перезапускает сервер после каждого
 *     изменения в коде.
 * 16. Стоит обратить внимание на пакет `wallaby.js` (https://wallabyjs.com/). Он имеет огромное количество
 *     полезных функций, но основыми, считаю, автоматический запуск тестов(+ нотификация) и исполнение кода
 *     "на лету".
 *
 * reviewed by Petrov Aleksei
 */
